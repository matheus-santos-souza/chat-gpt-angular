import { Component, ElementRef, ViewChild } from '@angular/core';
import { ChatbotService } from '../chatbot.service';

const PROMPT = `Voc√™ √© uma assistente virtual de resposta a perguntas chamada Betina, altamente inteligente e √∫til, especializada somente em politicas da empresa Grupo Pereira.\n Qualquer outro assunto voc√™ responder√° que n√£o entende do assunto.\n Adicione emojes ao longo da resposta ou ao final de cada frase.\n Seu objetivo √© analisar \"$$dados-redis\" e formular uma resposta objetiva e amig√°vel ao funcion√°rio.\n Os \"$$dados-redis\" s√£o as politicas da empresa.\n Voc√™ n√£o est√° autorizada a responder qualquer assunto fora das politicas da empresa.\n Se n√£o existe informa√ß√£o em \"$$dados-redis\" responda que voc√™ ainda n√£o tem conhecimento.\n Se houver tabelas contidas em \"$$dados-redis\" explique para complementar a resposta do usu√°rio.\n Nunca fale a palavra chave \"$$dados-redis\" substitua por \"pol√≠ticas da empresa\".\n Voc√™ deve responder informa√ß√µes somente se a mesma consta em \"$$dados-redis\"\n avalie a pergunta e se necess√°rio recolha mais informa√ß√µes do usu√°rio\n O usu√°rio n√£o tem acesso as politicas ent√£o voc√™ deve dar a resposta completa a ele!\n Dados contidos em tabelas e se√ß√µes voc√™ deve descreve-los de forma f√°cil de entender.\n N√£o indique ao usu√°rio consultas de items/t√≥picos/tabelas em outros locais.\n Caso o usu√°rio tenha mais d√∫vidas fa√ßa mais perguntas.  \n\n $$dados-redis: $$info-redis`

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.scss']
})
export class ChatComponent {
  time = new Intl
    .DateTimeFormat('pt-BR', { hour: '2-digit', minute: '2-digit' })
    .format(new Date())

  @ViewChild("input") input!: ElementRef;

  messages: any[] = [
    {
      role: "system",
      content: PROMPT
    },
    {
      role: "assistant",
      content: "Ol√°, sou a Betina assistente virtual do Grupo pereira! Em que posso te ajudar?"
    }
  ]

  constructor(private chatService: ChatbotService) { }

  limpar(): void {
    this.messages = [
      {
        role: "system",
        content: PROMPT
      },
      {
        role: "assistant",
        content: "Ol√°, sou a Betina assistente virtual do Grupo pereira! Em que posso te ajudar?"
      }
    ]
  }

  async enviar(): Promise<any> {
    if (this.input.nativeElement.value !== '') {
      this.messages.push({
        role: "user",
        content: this.input.nativeElement.value
      })

      this.input.nativeElement.value = ''

      this.chatService.getResponse({ messages: this.messages, topK: 3 })
      .subscribe({
        next: response => {
          console.log( response.body.resposta)
          const resposta =  response.body.resposta
          resposta.shift()
          resposta.unshift({
            role: "system",
            content: PROMPT
          },)
          this.messages = [...resposta]
        },
        error: error => {
          this.messages.push({
            role: "assistant",
            content: "Algo deu errado... desculpe o trasntorno! üôã‚Äç‚ôÄÔ∏è"
          })
        },
      });
    }
  }

}
